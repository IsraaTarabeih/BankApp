@page "/CreateAccount"
@inject IAccountService AccountService

<h3>Vänligen skapa ditt konto</h3>

<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div>
		<label>Kontonamn</label>
		<InputText @bind-Value="_model.Name"/>
	</div>

	<div>
		<label>KontoTyp</label>
		<InputSelect @bind-Value="_model.Type">
			<option value="">Välj Kontotyp!</option>
			<option value="@AccountType.Baskonto">Baskonto</option>
			<option value="@AccountType.Sparkonto">Sparkonto</option>
			<option value="@AccountType.Företagskonto">Företagskonto</option>
		</InputSelect>
	</div>

	<div>
		<label>Valuta</label>
		<InputText @bind-Value="_model.Currency" />
	</div>
	<div>
		<label>Start saldo</label>
		<InputNumber @bind-Value="_model.InitialBalance"/>
	</div>

	<button type="submit">Skapa konto!</button>
</EditForm>

<h3>Dina konton</h3>

@if (accounts == null || !accounts.Any())
{
	<p>Inga konton skapade ännu.</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Namn</th>
				<th>Typ</th>
				<th>Valuta</th>
				<th>Saldo</th>
				<th>Senast uppdaterad</th>
			</tr>
		</thead>
	<tbody>
		@foreach (var acc in accounts)
		{
			<tr>
				<td>@acc.Name</td>
				<td>@acc.AccountType</td>
				<td>@acc.Currency</td>
				<td>@acc.Balance.ToString("N0", CultureInfo.GetCultureInfo("sv-SE"))</td>
				<td>@acc.LastUpdated.ToString("yyyy-MM-dd HH:mm", CultureInfo.GetCultureInfo("sv-SE"))</td>
			</tr>
		}
	</tbody>
	</table>

}

@code {
	private List<IBankAccount> accounts = new();
	private CreateAccountModel _model = new();

	protected override async Task OnInitializedAsync()
	{
		accounts = await AccountService.GetAccountsAsync();
	}
	private async Task CreateAccountAsync()
	{
		try
		{
			await AccountService.CreateBankAccountAsync(

				_model.Name,
				_model.Type,
				_model.Currency,
				_model.InitialBalance
			);

			accounts = await AccountService.GetAccountsAsync();

			_model.Clear();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fel vid skapande av konto: {ex.Message}");
			throw;

		}
		
	}

	private class CreateAccountModel
	{
		public string Name { get; set; } = string.Empty;
		public AccountType Type { get; set; } = default;
		public string Currency { get; set; } = String.Empty;
		public decimal InitialBalance { get; set; } = 0m;

		public void Clear()
		{
			Name = string.Empty;
			Type = default;
			Currency = string.Empty;
			InitialBalance = 0m;
			 
		}

	}


}

		
	

	